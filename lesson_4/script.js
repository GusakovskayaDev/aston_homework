// 1. Написать ответ - почему массивы в JS являются "неправильными" и совмещают в себе несколько структур данных? Какие ?
// Массивы в JavaScript могут содержать значения разных типов: числа, строки, объекты, функции и даже другие массивы. Это делает их более гибкими, а также "неправильными". Также массивы в JavaScript на самом деле являются объектами с числовыми индексами, что позволяет использовать их как хэш-таблицы (или ассоциативные массивы) при необходимости. Массивы могут вести себя как различные структуры данных и из-за этих особенностей в JavaScript они могут быть использованы как для работы с коллекциями данных, например, списками, так и для реализации более сложных структур данных, таких как стеки, очереди (хэш-таблицы о которых говорилось ранее). Это сочетание разных структур данных и делает массивы в JS "неправильными".

// ________________________________________________________________________________________________________________

// 2. Привязать контекст объекта так, чтобы при вызове функции ${this.item} имело значение - 'some value'(Привязать через bind, call, apply)
// const obj = { item: 'some value' }

// function logger() {
//   console.log(`I output only external context: ${this.item}`);
// }
// logger.call(obj);
// logger.apply(obj);
// const binded = logger.bind(obj);
// binded();

// Комментарий:
// Apply & Call возвращают результат фукнции, а Bind возвращает новую функцию с привязанным контектстом навсегда, это означает, что мы больше не сможем изменить контекст у новой функции, даже если используем Call или Apply.

// ________________________________________________________________________________________________________________

// 3. Реализовать полифил (собственную функцию реализующую встроенную в js) метода bind()
if (!Function.prototype.bind) {
	Function.prototype.bind = function(context, ...args) {
			const func = this;
			return function(...innerArgs) {
			return func.apply(context, [...args, ...innerArgs]);
		};
	};
}







